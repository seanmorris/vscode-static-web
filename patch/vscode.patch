diff --git a/src/vs/code/browser/workbench/workbench.ts b/src/vs/code/browser/workbench/workbench.ts
index f887502..695d937 100644
--- a/src/vs/code/browser/workbench/workbench.ts
+++ b/src/vs/code/browser/workbench/workbench.ts
@@ -22,6 +22,8 @@ import { AuthenticationSessionInfo } from 'vs/workbench/services/authentication/
 import type { IURLCallbackProvider } from 'vs/workbench/services/url/browser/urlService';
 import { create } from 'vs/workbench/workbench.web.main';
 
+declare const window: any;
+
 interface ISecretStorageCrypto {
 	seal(data: string): Promise<string>;
 	unseal(data: string): Promise<string>;
@@ -575,6 +577,7 @@ function readCookie(name: string): string | undefined {
 		? new ServerKeyedAESCrypto(secretStorageKeyPath) : new TransparentCrypto();
 
 	// Create workbench
+	window.vscodeAlterConfig && window.vscodeAlterConfig(config);
 	create(mainWindow.document.body, {
 		...config,
 		windowIndicator: config.windowIndicator ?? { label: '$(remote)', tooltip: `${product.nameShort} Web` },
diff --git a/src/vs/workbench/browser/web.factory.ts b/src/vs/workbench/browser/web.factory.ts
index f1ff86d..948006c 100644
--- a/src/vs/workbench/browser/web.factory.ts
+++ b/src/vs/workbench/browser/web.factory.ts
@@ -60,6 +60,7 @@ export function create(domElement: HTMLElement, options: IWorkbenchConstructionO
 	// Startup workbench and resolve waiters
 	let instantiatedWorkbench: IWorkbench | undefined = undefined;
 	new BrowserMain(domElement, options).open().then(workbench => {
+		(globalThis as any).vscodeExposeEditor && (globalThis as any).vscodeExposeEditor(workbench);
 		instantiatedWorkbench = workbench;
 		workbenchPromise.complete(workbench);
 	});
